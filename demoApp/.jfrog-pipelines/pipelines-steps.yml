pipelines:
  - name: app_build_pipeline
    configuration:
      environmentVariables:
        readOnly:
          JFROG_CLI_BUILD_NAME: app_build
    steps:
      - name: trigger_all
        type: Bash
        execution:
          onExecute:
            - echo "triggering all steps now"
      - name: backend_build
        type: MvnBuild
        configuration:
          resolverSnapshotRepo: test-libs-snapshot
          resolverReleaseRepo: test-libs-release
          deployerSnapshotRepo: test-libs-snapshot-local
          deployerReleaseRepo: test-libs-release-local
          #mvnCommand: clean install -ntp
          sourceLocation: backend
          inputSteps:
            - name: trigger_all
          inputResources:
            - name: backend_gitRepo
          integrations:
            - name: myArtifactory
          outputResources:
            - name: backend_package
          runtime:
            type: image
            image:
              auto:
                language: java
                versions:
                  - "11"
        execution:
          onStart:
            - javac -version
            - mvn --version

      - name: frontend_build
        type: NpmBuild
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - "14"
          affinityGroup: frontend
          npmArgs: --no-progress --no-audit
          sourceLocation: ./demoApp/frontend
          repositoryName: test-npm-virtual
          inputSteps:
            - name: trigger_all
          inputResources:
            - name: frontend_gitRepo
          integrations:
            - name: myArtifactory
        execution:
          onComplete:
            - cp -r $res_frontend_gitRepo_resourcePath $shared_workspace
            - rm -rf $steplet_run_state_dir/npmBuildInputGitRepo

      - name: publish_frontend
        type: Bash
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - "14"
          affinityGroup: frontend
          inputSteps:
            - name: frontend_build
          outputResources:
            - name: frontend_package
          integrations:
            - name: myArtifactory
        execution:
          onStart:
            - pushd $shared_workspace/frontend_gitRepo/frontend
            - npm update
            - npm run build
            - jfrog rt npm-config --repo-deploy test-npm-dev-local --server-id-deploy myArtifactory
            - jfrog rt npm-publish --detailed-summary

      - name: build_app
        type: Bash
        configuration:
          environmentVariables:
            dockerImageName: pipelines.jfrog.io/test-docker-dev-local/app
            dockerImageTag: ${run_number}
          inputResources:
            - name: backend_gitRepo
              trigger: false
            - name: frontend_package
            - name: backend_package
          integrations:
            - name: myArtifactory
        execution:
          onStart:
            - rm -rf $run_dir/workspace/jfrog
            - add_run_variables buildStepName=${step_name}
            - add_run_variables ${step_name}_buildNumber=${run_number}
            - add_run_variables ${step_name}_buildName=${pipeline_name}
          onExecute:
            - pushd $res_backend_gitRepo_resourcePath
            - pushd backend
            - cp $res_frontend_package_resourcePath/frontend-3.0.0.tgz ./client.tgz
            - cp $res_backend_package_resourcePath/backend-1.0.0.jar ./server.jar
            - docker build --pull --no-cache -t $dockerImageName:$dockerImageTag --build-arg REGISTRY=${int_myArtifactory_url} .
          onSuccess:
            - jfrog rt bce $pipeline_name $run_number
            - jfrog rt docker-push $dockerImageName:$dockerImageTag test-docker-dev-local --build-name=$pipeline_name --build-number=$run_number
            - add_run_files /tmp/jfrog/. jfrog

      - name: publish_app_build
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: build_app
          outputResources:
            - name: app_build

      - name: deploy_staging
        type: Bash
        configuration:
          inputResources:
            - name: app_build
        execution:
          onExecute:
            - echo "logic to deploy to staging environment"
      
      - name: approvalGate
        type: Bash
        configuration:
          inputSteps:
            - name: deploy_staging
          requiresApproval:
            approvers:
              - rajeshg
        execution:
          onExecute:
            - echo "approved"

      - name: deploy_production
        type: Bash
        configuration:
          inputSteps:
            - name: approvalGate
        execution:
          onExecute:
            - echo "logic to deploy to production environment"

      - name: deploy_pre_production
        type: Bash
        configuration:
          inputResources:
            - name: app_build
              trigger: false
        execution:
          onExecute:
            - echo "logic to deploy to pre production environment"
